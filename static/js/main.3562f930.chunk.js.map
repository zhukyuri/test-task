{"version":3,"sources":["features/settings/SettingsForm.js","app/apiCall.js","features/settings/settingsSlice.js","features/settings/Settings.js","App.js","app/store.js","index.js"],"names":["validateSchema","Yup","settings","of","url","required","SettingsForm","onSubmit","pages","className","validationSchema","initialValues","name","push","remove","form","console","log","values","map","rule","index","as","p","value","id","page","type","touched","errors","onClick","action","apiCall","axios","create","baseURL","settingsSlice","createSlice","initialState","loading","reducers","getPagesStart","state","getPagesSuccess","payload","getPagesFailure","actions","settingsReducer","reducer","Settings","dispatch","useDispatch","useSelector","useEffect","a","get","response","data","App","configureStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"iMAIMA,EAAiBC,IAAW,CAChCC,SAAUD,MAAYE,GACpBF,IAAW,CACTG,IAAKH,MAAaI,gBAKjB,SAASC,EAAT,GAA4C,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MACvC,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CACEC,iBAAkBV,EAClBW,cAAe,CACbT,SAAU,IAEZK,SAAUA,EALZ,SAOE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYK,KAAK,WAAjB,SACG,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,KAAjB,OACC,qCACGC,QAAQC,IAAIF,IAAS,KACrBA,EAAKG,OAAOhB,SAASiB,KAAI,SAACC,EAAMC,GAAP,iBACxB,gCACE,eAAC,IAAD,CAAOC,GAAG,SAASV,KAAI,mBAAcS,EAAd,UAAvB,UACGb,EAAMW,KAAI,SAACI,GAAD,OACT,wBAAmBC,MAAOD,EAAEE,GAA5B,SACGF,EAAEX,MADQW,EAAEE,OAIjB,wBAAQD,MAAM,SAAd,uBAEoC,WAArCT,EAAKG,OAAOhB,SAASmB,GAAOK,MAC3B,qCACE,eAAC,IAAD,CAAOJ,GAAG,SAASV,KAAI,mBAAcS,EAAd,YAAvB,UACE,wBAAQG,MAAM,WAAd,sBACA,wBAAQA,MAAM,aAAd,4BAEF,cAAC,IAAD,CAAOG,KAAK,OAAOf,KAAI,mBAAcS,EAAd,YACtB,UAAAN,EAAKa,QAAQ1B,SAASmB,UAAtB,eAA8BjB,OAA9B,UACCW,EAAKc,OAAO3B,SAASmB,UADtB,aACC,EAA6BjB,MAC3B,wCAAMW,EAAKc,OAAO3B,SAASmB,UAA3B,aAAM,EAA6BjB,SAK3C,wBAAQ0B,QAAS,kBAAMhB,EAAOO,IAA9B,qBAGJ,wBACES,QAAS,wBACPjB,EAAK,CACHa,KAAI,UAAElB,EAAM,UAAR,aAAE,EAAUiB,GAChBM,OAAQ,WACR3B,IAAK,MALX,kC,6CCpDH4B,E,OAAUC,EAAMC,OAAO,CAClCC,QAAS,qCCKEC,EAAgBC,YAAY,CACvCzB,KAAM,WACN0B,aAAc,CACZ9B,MAAO,GACP+B,SAAS,GAEXC,SAAU,CACRC,cAAe,SAACC,GACdA,EAAMH,SAAU,GAElBI,gBAAiB,SAACD,EAAOX,GACvBW,EAAMH,SAAU,EAChBG,EAAMlC,MAAQuB,EAAOa,SAEvBC,gBAAiB,SAACH,GAChBA,EAAMH,SAAU,M,EASlBH,EAAcU,QAHhBL,E,EAAAA,cACAE,E,EAAAA,gBACAE,E,EAAAA,gBAeWE,EAAkBX,EAAcY,QCzCtC,SAASC,IACd,IAAMC,EAAWC,cADQ,EAEEC,aAAY,SAACV,GAAD,OAAWA,EAAMxC,YAAhDM,EAFiB,EAEjBA,MAAO+B,EAFU,EAEVA,QAMf,OAJAc,qBAAU,WACRH,EDyBF,uCAAO,WAAOA,GAAP,eAAAI,EAAA,6DACLJ,EAAST,KADJ,kBAGoBT,EAAQuB,IAAI,UAHhC,OAGGC,EAHH,OAIHN,EAASP,EAAgBa,EAASC,OAJ/B,gDAMHP,EAASL,KANN,yDAAP,yDCxBG,CAACK,IAGF,qBAAKzC,UAAU,MAAf,SACG8B,EACC,8CAEA,cAACjC,EAAD,CAAcC,SAAUS,QAAQC,IAAKT,MAAOA,MCf7C,SAASkD,IACd,OACE,qBAAKjD,UAAU,MAAf,SACE,cAACwC,EAAD,MCHSU,kBAAe,CAC5BX,QAAS,CACP9C,SAAU6C,KCEda,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAACL,EAAD,QAGJM,SAASC,eAAe,U","file":"static/js/main.3562f930.chunk.js","sourcesContent":["import React from 'react';\nimport { FieldArray, Form, Formik, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst validateSchema = Yup.object({\n  settings: Yup.array().of(\n    Yup.object({\n      url: Yup.string().required(),\n    })\n  ),\n});\n\nexport function SettingsForm({ onSubmit, pages }) {\n  return (\n    <div className=\"App\">\n      <Formik\n        validationSchema={validateSchema}\n        initialValues={{\n          settings: [],\n        }}\n        onSubmit={onSubmit}\n      >\n        <Form>\n          <FieldArray name=\"settings\">\n            {({ push, remove, form }) => (\n              <>\n                {console.log(form) || null}\n                {form.values.settings.map((rule, index) => (\n                  <div>\n                    <Field as=\"select\" name={`settings[${index}].page`}>\n                      {pages.map((p) => (\n                        <option key={p.id} value={p.id}>\n                          {p.name}\n                        </option>\n                      ))}\n                      <option value=\"custom\">Custom</option>\n                    </Field>\n                    {form.values.settings[index].page === 'custom' && (\n                      <>\n                        <Field as=\"select\" name={`settings[${index}].action`}>\n                          <option value=\"contains\">Contains</option>\n                          <option value=\"exactMatch\">Exact match</option>\n                        </Field>\n                        <Field type=\"text\" name={`settings[${index}].url`} />\n                        {form.touched.settings[index]?.url &&\n                          form.errors.settings[index]?.url && (\n                            <div>{form.errors.settings[index]?.url}</div>\n                          )}\n                      </>\n                    )}\n\n                    <button onClick={() => remove(index)}>X</button>\n                  </div>\n                ))}\n                <button\n                  onClick={() =>\n                    push({\n                      page: pages[0]?.id,\n                      action: 'contains',\n                      url: '',\n                    })\n                  }\n                >\n                  New Rule\n                </button>\n              </>\n            )}\n          </FieldArray>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import axios from 'axios';\n\nexport const apiCall = axios.create({\n  baseURL: 'https://api.mocki.io/v1/8674df40',\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport { apiCall } from '../../app/apiCall';\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: {\n    pages: [],\n    loading: false,\n  },\n  reducers: {\n    getPagesStart: (state) => {\n      state.loading = true;\n    },\n    getPagesSuccess: (state, action) => {\n      state.loading = false;\n      state.pages = action.payload;\n    },\n    getPagesFailure: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nconst {\n  getPagesStart,\n  getPagesSuccess,\n  getPagesFailure,\n} = settingsSlice.actions;\n\nexport const getPages = () => {\n  return async (dispatch) => {\n    dispatch(getPagesStart());\n    try {\n      const response = await apiCall.get('/pages');\n      dispatch(getPagesSuccess(response.data));\n    } catch (err) {\n      dispatch(getPagesFailure());\n    }\n  };\n};\n\nexport const settingsReducer = settingsSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SettingsForm } from './SettingsForm';\nimport { getPages } from './settingsSlice';\n\nexport function Settings() {\n  const dispatch = useDispatch();\n  const { pages, loading } = useSelector((state) => state.settings);\n\n  useEffect(() => {\n    dispatch(getPages());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div>Loading ...</div>\n      ) : (\n        <SettingsForm onSubmit={console.log} pages={pages}/>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Settings } from './features/settings/Settings';\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Settings />\n    </div>\n  );\n}\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport { settingsReducer } from '../features/settings/settingsSlice';\n\nexport default configureStore({\n  reducer: {\n    settings: settingsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}